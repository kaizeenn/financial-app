<%- contentFor('style') %>
<link href="/stylesheets/transactions.css" rel="stylesheet" />

<%- contentFor('body') %>
<div class="d-flex justify-content-between align-items-center mb-4">
  <h2>Transaksi</h2>
  <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTransactionModal">
    <i class="bi bi-plus-lg"></i> Tambah Transaksi
  </button>
</div>

<% if (error) { %>
  <div class="alert alert-danger">
    <i class="bi bi-exclamation-triangle"></i> <%= error %>
  </div>
<% } %>

<!-- Filter Transaksi -->
<div class="card mb-4">
  <div class="card-body">
    <form id="filterForm" method="GET" action="/transactions" class="row g-3 align-items-center">
      <div class="col-auto">
        <label for="type" class="form-label">Tipe</label>
        <select class="form-select" id="type" name="type" onchange="this.form.submit()">
          <option value="all" <%= type === 'all' ? 'selected' : '' %>>Semua</option>
          <option value="income" <%= type === 'income' ? 'selected' : '' %>>Pemasukan</option>
          <option value="expense" <%= type === 'expense' ? 'selected' : '' %>>Pengeluaran</option>
        </select>
      </div>

      <div class="col-auto">
        <label for="dateRange" class="form-label">Rentang Waktu</label>
        <select class="form-select" id="dateRange" name="dateRange" onchange="onDateRangeChange()">
          <option value="" <%= (!startDate && !endDate) || (startDate === '' && endDate === '') ? 'selected' : '' %>>Semua</option>
          <option value="7days" <%= (startDate && endDate && (function(start, end) {
            const startDate = new Date(start);
            const endDate = new Date(end);
            const now = new Date();
            const sevenDaysAgo = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 6);
            sevenDaysAgo.setHours(0,0,0,0);
            endDate.setHours(0,0,0,0);
            now.setHours(0,0,0,0);
            return startDate.getTime() === sevenDaysAgo.getTime() && endDate.getTime() === now.getTime();
          })(startDate, endDate)) ? 'selected' : '' %>>7 Hari Terakhir</option>
          <option value="thisMonth" <%= (startDate && endDate && (function(start, end) {
            const startDate = new Date(start);
            const endDate = new Date(end);
            const now = new Date();
            const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
            const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            firstDay.setHours(0,0,0,0);
            lastDay.setHours(0,0,0,0);
            startDate.setHours(0,0,0,0);
            endDate.setHours(0,0,0,0);
            return startDate.getTime() === firstDay.getTime() && endDate.getTime() === lastDay.getTime();
          })(startDate, endDate)) ? 'selected' : '' %>>Bulan Ini</option>
          <option value="custom" <%= (startDate && endDate && !(function(start, end) {
            const startDate = new Date(start);
            const endDate = new Date(end);
            const now = new Date();
            const sevenDaysAgo = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 6);
            sevenDaysAgo.setHours(0,0,0,0);
            endDate.setHours(0,0,0,0);
            now.setHours(0,0,0,0);
            if (startDate.getTime() === sevenDaysAgo.getTime() && endDate.getTime() === now.getTime()) {
              return true;
            }
            const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
            const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            firstDay.setHours(0,0,0,0);
            lastDay.setHours(0,0,0,0);
            startDate.setHours(0,0,0,0);
            endDate.setHours(0,0,0,0);
            return startDate.getTime() === firstDay.getTime() && endDate.getTime() === lastDay.getTime();
          })(startDate, endDate)) ? 'selected' : '' %>>Pilih Tanggal</option>
        </select>
      </div>

      <div class="col-auto" id="customDateInputs" style="display: none;">
        <label for="start_date" class="form-label">Dari</label>
        <input type="date" class="form-control" id="start_date" name="start_date" value="<%= startDate || '' %>" onchange="document.getElementById('filterForm').submit()">
      </div>

      <div class="col-auto" id="customDateInputsEnd" style="display: none;">
        <label for="end_date" class="form-label">Sampai</label>
        <input type="date" class="form-control" id="end_date" name="end_date" value="<%= endDate || '' %>" onchange="document.getElementById('filterForm').submit()">
      </div>

      <div class="col-auto">
        <label for="category_id" class="form-label">Kategori</label>
        <select class="form-select" id="category_id" name="category_id" onchange="this.form.submit()">
          <option value="">Semua Kategori</option>
          <% categories.forEach(category => { %>
            <option value="<%= category.id %>" <%= categoryId == category.id ? 'selected' : '' %>>
              <%= category.name %>
            </option>
          <% }) %>
        </select>
      </div>

      <div class="col-auto align-self-end d-flex gap-2">
        <button type="submit" class="btn btn-primary">Filter</button>
        <a href="/transactions" class="btn btn-secondary">Clear Filter</a>
      </div>
    </form>
  </div>
</div>

<script>
  function isLast7Days(start, end) {
    const startDate = new Date(start);
    const endDate = new Date(end);
    const now = new Date();
    const sevenDaysAgo = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 6);
    sevenDaysAgo.setHours(0,0,0,0);
    endDate.setHours(0,0,0,0);
    now.setHours(0,0,0,0);
    return startDate.getTime() === sevenDaysAgo.getTime() && endDate.getTime() === now.getTime();
  }

  function isThisMonth(start, end) {
    const startDate = new Date(start);
    const endDate = new Date(end);
    const now = new Date();
    const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
    const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    firstDay.setHours(0,0,0,0);
    lastDay.setHours(0,0,0,0);
    startDate.setHours(0,0,0,0);
    endDate.setHours(0,0,0,0);
    return startDate.getTime() === firstDay.getTime() && endDate.getTime() === lastDay.getTime();
  }

  let isInitialLoad = true;

  function onDateRangeChange() {
    let dateRange = document.getElementById('dateRange').value;
    const customStart = document.getElementById('start_date');
    const customEnd = document.getElementById('end_date');
    const customInputs = document.getElementById('customDateInputs');
    const customInputsEnd = document.getElementById('customDateInputsEnd');

    const now = new Date();
    now.setHours(0,0,0,0);

    // If manual dates are set but dateRange is not 'custom', set it to 'custom'
    if (!dateRange || dateRange === '') {
      if (customStart.value && customEnd.value) {
        dateRange = 'custom';
        document.getElementById('dateRange').value = 'custom';
      }
    }

    if (dateRange === '7days') {
      customInputs.style.display = 'none';
      customInputsEnd.style.display = 'none';
      const sevenDaysAgo = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 6);
      customStart.value = sevenDaysAgo.toISOString().split('T')[0];
      customEnd.value = now.toISOString().split('T')[0];
      if (!isInitialLoad) {
        document.getElementById('filterForm').submit();
      }
    } else if (dateRange === 'thisMonth') {
      customInputs.style.display = 'none';
      customInputsEnd.style.display = 'none';
      const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
      const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);
      customStart.value = firstDay.toISOString().split('T')[0];
      customEnd.value = lastDay.toISOString().split('T')[0];
      if (!isInitialLoad) {
        document.getElementById('filterForm').submit();
      }
    } else if (dateRange === 'custom') {
      customInputs.style.display = '';
      customInputsEnd.style.display = '';
      customStart.value = customStart.value || '';
      customEnd.value = customEnd.value || '';
    } else {
      customInputs.style.display = 'none';
      customInputsEnd.style.display = 'none';
      customStart.value = '';
      customEnd.value = '';
      if (!isInitialLoad) {
        document.getElementById('filterForm').submit();
      }
    }
  }
  
  // Tambahkan event listener untuk input tanggal agar mengubah dateRange ke 'custom' dan submit form
  document.getElementById('start_date').addEventListener('change', function() {
    document.getElementById('dateRange').value = 'custom';
    document.getElementById('filterForm').submit();
  });

  document.getElementById('end_date').addEventListener('change', function() {
    document.getElementById('dateRange').value = 'custom';
    document.getElementById('filterForm').submit();
  });
  
  window.addEventListener('load', () => {
    onDateRangeChange();
    isInitialLoad = false;
  });
</script>

<!-- Daftar Transaksi -->
<div class="card">
  <div class="card-body">
    <div class="table-responsive">
      <table class="table table-hover">
        <thead>
          <tr>
            <th>Tanggal</th>
            <th>Kategori</th>
            <th>Deskripsi</th>
            <th>Akun</th>
            <th>Metode Pembayaran</th>
            <th>Jumlah</th>
            <th>Aksi</th>
          </tr>
        </thead>
        <tbody>
          <% transactions.forEach(transaction => { %>
            <tr>
              <td><%= new Date(transaction.entry_date).toLocaleDateString('id-ID') %></td>
              <td>
                <span class="badge <%= transaction.type === 'income' ? 'bg-success' : 'bg-danger' %>">
                  <% 
                    const category = categories.find(c => c.id === transaction.category_id);
                    const categoryName = category ? category.name : (transaction.type === 'income' ? 'Pemasukan' : 'Pengeluaran');
                  %>
                  <%= categoryName %>
                </span>
              </td>
              <td><%= transaction.description || '-' %></td>
              <td><%= transaction.account_name || '-' %></td>
              <td>
                <span class="badge bg-info"><%= transaction.payment_method || '-' %></span>
              </td>
              <td class="<%= transaction.type === 'income' ? 'text-success' : 'text-danger' %>">
                <%= transaction.type === 'income' ? '+' : '-' %> Rp <%= transaction.amount %>
              </td>
              <td>
                <button class="btn btn-sm btn-danger" 
                        onclick="deleteTransaction('<%= transaction.type %>', '<%= transaction.id %>')">
                  <i class="bi bi-trash"></i>
                </button>
              </td>
            </tr>
          <% }) %>
          <% if (transactions.length === 0) { %>
            <tr>
              <td colspan="7" class="text-center py-4">
                Belum ada transaksi
              </td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Add Transaction Modal -->
<div class="modal fade" id="addTransactionModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Tambah Transaksi Baru</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="transactionForm">
        <div class="modal-body">
          <!-- Jenis Transaksi -->
          <div class="mb-3">
            <label class="form-label">Jenis Transaksi</label>
            <div class="btn-group w-100" role="group">
              <input type="radio" class="btn-check" name="type" id="typeIncome" value="income" checked>
              <label class="btn btn-outline-success" for="typeIncome">Pemasukan</label>
              <input type="radio" class="btn-check" name="type" id="typeExpense" value="expense">
              <label class="btn btn-outline-danger" for="typeExpense">Pengeluaran</label>
            </div>
          </div>

          <!-- Kategori -->
          <div class="mb-3">
            <label for="category_id" class="form-label">Kategori</label>
            <select class="form-select" id="category_id" name="category_id" required>
              <option value="">Pilih Kategori</option>
              <% categories.forEach(category => { %>
                <option value="<%= category.id %>" 
                        data-type="<%= category.type %>" 
                        class="<%= category.type %>-category" 
                        style="display: none">
                  <%= category.name %>
                </option>
              <% }) %>
            </select>
          </div>

          <!-- Jumlah -->
          <div class="mb-3">
            <label for="amount" class="form-label">Jumlah</label>
            <div class="input-group">
              <span class="input-group-text">Rp</span>
              <input type="text" class="form-control" id="amount" name="amount" required>
            </div>
          </div>

          <!-- Tanggal -->
          <div class="mb-3">
            <label for="entry_date" class="form-label">Tanggal</label>
            <input type="date" class="form-control" id="entry_date" name="entry_date" 
                   required value="<%= new Date().toISOString().split('T')[0] %>">
          </div>

          <!-- Akun -->
          <div class="mb-3">
            <label for="account_id" class="form-label">Akun</label>
            <select class="form-select" id="account_id" name="account_id">
              <option value="">Pilih Akun (Opsional)</option>
              <% accounts.forEach(account => { %>
                <option value="<%= account.id %>">
                  <%= account.name %> (Rp <%= new Intl.NumberFormat('id-ID').format(account.balance) %>)
                </option>
              <% }) %>
            </select>
          </div>

          <!-- Metode Pembayaran -->
          <div class="mb-3">
            <label for="payment_method_id" class="form-label">Metode Pembayaran</label>
            <select class="form-select" id="payment_method_id" name="payment_method_id">
              <option value="">Pilih Metode Pembayaran (Opsional)</option>
              <% paymentMethods.forEach(method => { %>
                <option value="<%= method.id %>"><%= method.method_name %></option>
              <% }) %>
            </select>
          </div>

          <!-- Deskripsi -->
          <div class="mb-3">
            <label for="description" class="form-label">Deskripsi (Opsional)</label>
            <textarea class="form-control" id="description" name="description" rows="2"></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
          <button type="submit" class="btn btn-primary">Simpan</button>
        </div>
      </form>
    </div>
  </div>
</div>

<%- contentFor('script') %>
<script>
  // Filter kategori berdasarkan jenis transaksi
  function updateCategoryOptions(type) {
    const categorySelect = document.getElementById('category_id');
    categorySelect.value = ''; // Reset pilihan
    
    document.querySelectorAll('.income-category').forEach(option => {
      option.style.display = type === 'income' ? '' : 'none';
    });
    
    document.querySelectorAll('.expense-category').forEach(option => {
      option.style.display = type === 'expense' ? '' : 'none';
    });
  }

  // Event listener untuk perubahan tipe transaksi
  document.querySelectorAll('input[name="type"]').forEach(radio => {
    radio.addEventListener('change', function() {
      updateCategoryOptions(this.value);
    });
  });

  // Set tampilan kategori awal
  window.addEventListener('load', function() {
    const selectedType = document.querySelector('input[name="type"]:checked').value;
    updateCategoryOptions(selectedType);
  });

  // Handle session expired
  async function handleSessionExpired(response) {
    if (response.status === 401) {
      try {
        const data = await response.json();
        alert('Sesi telah berakhir, silakan login kembali');
        window.location.href = data.redirect || '/auth/login';
      } catch (error) {
        window.location.href = '/auth/login';
      }
      return true;
    }
    return false;
  }

  // Hapus transaksi
  async function deleteTransaction(type, id) {
    if (!confirm('Yakin ingin menghapus transaksi ini?')) return;

    try {
      const response = await fetch(`/transactions/${type}/${id}`, {
        method: 'DELETE'
      });

      if (await handleSessionExpired(response)) return;

      const data = await response.json();
      if (data.success) {
        window.location.reload();
      } else {
        alert(data.message || 'Terjadi kesalahan saat menghapus transaksi');
      }
    } catch (error) {
      console.error('Delete error:', error);
      alert('Terjadi kesalahan saat menghapus transaksi');
    }
  }

  // Format input jumlah ke format Indonesia
  const amountInput = document.getElementById('amount');

  amountInput.addEventListener('input', function(e) {
    let value = this.value.replace(/[^0-9]/g, '');
    if (value) {
      value = new Intl.NumberFormat('id-ID').format(value);
    }
    this.value = value;
  });

  // Handle form submit
  document.getElementById('transactionForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    try {
      // Ambil nilai jumlah dan konversi ke angka tanpa format
      const rawAmount = amountInput.value.replace(/\./g, '');
      const formData = new FormData(this);
      formData.set('amount', rawAmount);

      const response = await fetch('/transactions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: new URLSearchParams(formData)
      });

      if (await handleSessionExpired(response)) return;

      const data = await response.json();
      
      if (data.success) {
        window.location.reload();
      } else {
        alert(data.message || 'Terjadi kesalahan saat menyimpan transaksi');
      }
    } catch (error) {
      console.error('Submit error:', error);
      alert('Terjadi kesalahan saat menyimpan transaksi');
    }
  });
</script>
